# =============================================================================
# PR Bridge 프로젝트 Docker Compose 설정
# =============================================================================
# 이 파일은 개발 환경에 필요한 모든 서비스를 관리합니다:
# - PostgreSQL: 데이터베이스
# - Jenkins: CI/CD 서버
# - PR Bridge: Rust 애플리케이션 (나중에 활성화)
# - 실행 방법: docker-compose up -d
# =============================================================================

services:
  # ---------------------------------------------------------------------------
  # PostgreSQL 데이터베이스
  # ---------------------------------------------------------------------------
  # PR 정보, 빌드 상태 등을 저장하는 메인 데이터베이스
  # Alpine Linux 기반으로 경량화
  # ---------------------------------------------------------------------------
  postgres:
    image: postgres:17-alpine  # PostgreSQL 17, Alpine Linux 기반 (경량)
    container_name: pr-bridge-db  # 컨테이너 이름 (docker ps에서 보이는 이름)
    
    # 데이터베이스 초기 설정 (환경변수)
    environment:
      POSTGRES_DB: pr_bridge          # 생성할 데이터베이스 이름
      POSTGRES_USER: pr_bridge_user   # 데이터베이스 사용자명
      POSTGRES_PASSWORD: password     # 비밀번호
    
    # 포트 매핑: 호스트포트:컨테이너포트
    # localhost:5432로 접속하면 컨테이너 내부 5432로 연결됨
    ports:
      - "5432:5432"  # PostgreSQL 기본 포트
    
    # 볼륨 마운트: 데이터 영속성 보장
    # 컨테이너 삭제해도 데이터는 유지됨
    volumes:
      - postgres_data:/var/lib/postgresql/data  # DB 데이터 저장 위치
    
    # 헬스체크: 데이터베이스가 준비됐는지 주기적으로 확인
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pr_bridge_user -d pr_bridge"]
      interval: 10s   # 10초마다 체크
      timeout: 5s     # 5초 내 응답 없으면 실패
      retries: 5      # 5번 연속 실패 시 unhealthy 판정
    
    # 네트워크: 컨테이너 간 통신을 위한 네트워크 지정
    networks:
      - pr-bridge-network

  # ---------------------------------------------------------------------------
  # Jenkins CI/CD 서버
  # ---------------------------------------------------------------------------
  # PR 빌드, 테스트, 배포를 자동화하는 CI/CD 서버
  # LTS(Long Term Support) 버전 사용
  # ---------------------------------------------------------------------------
  jenkins:
    image: jenkins/jenkins:lts-jdk17  # Jenkins LTS, JDK 17 포함
    container_name: pr-bridge-jenkins # 컨테이너 이름 (docker ps에서 보이는 이름)
    user: root  # Docker 소켓 접근을 위해 root 권한 필요
    
    # Jenkins 실행 옵션
    environment:
      - JENKINS_OPTS=--prefix=/jenkins  # URL 경로 prefix 설정 (선택사항)
    
    # 포트 매핑
    ports:
      - "5000:8080"   # Jenkins 웹 UI (호스트 5000 → 컨테이너 8080)
      - "50000:50000" # Jenkins 빌드 에이전트 통신용 포트
    
    # 볼륨 마운트
    volumes:
      - jenkins_home:/var/jenkins_home  # Jenkins 설정 및 작업 데이터
      # Docker-in-Docker: Jenkins가 Docker 명령을 실행할 수 있도록 소켓 공유
      - /var/run/docker.sock:/var/run/docker.sock
    
    networks:
      - pr-bridge-network

  # ---------------------------------------------------------------------------
  # PR Bridge 애플리케이션 (Rust)
  # ---------------------------------------------------------------------------
  # GitHub PR과 Jenkins를 연동하는 메인 애플리케이션
  # 개발 완료 후 주석 제거하여 활성화
  # ---------------------------------------------------------------------------
  # pr-bridge:
  #   # 빌드 설정: 현재 디렉토리의 Dockerfile을 사용하여 이미지 빌드
  #   build:
  #     context: .              # 빌드 컨텍스트 (현재 디렉토리)
  #     dockerfile: Dockerfile  # 사용할 Dockerfile 경로
  #   
  #   container_name: pr-bridge-app
  #   
  #   # 의존성: postgres가 healthy 상태가 되면 시작
  #   depends_on:
  #     postgres:
  #       condition: service_healthy  # healthcheck 통과 대기
  #   
  #   # 환경변수: 앱 실행에 필요한 설정
  #   # 주의: 컨테이너 간 통신 시 localhost가 아닌 서비스명(postgres, jenkins) 사용
  #   environment:
  #     - DATABASE_URL=postgresql://pr_bridge_user:dev_password_123@postgres:5432/pr_bridge
  #     - JENKINS_URL=http://jenkins:8080
  #     - SERVER_HOST=0.0.0.0
  #     - SERVER_PORT=8000
  #   
  #   # 포트 매핑: 애플리케이션 웹 서버
  #   ports:
  #     - "8000:8000"  # 호스트 8000 → 컨테이너 8000
  #   
  #   networks:
  #     - pr-bridge-network

# =============================================================================
# 볼륨 정의
# =============================================================================
# Named volumes: Docker가 관리하는 영속적 데이터 저장소
# docker volume ls 명령으로 확인 가능
# =============================================================================
volumes:
  postgres_data:    # PostgreSQL 데이터 저장
  jenkins_home:     # Jenkins 설정 및 빌드 데이터 저장

# =============================================================================
# 네트워크 정의
# =============================================================================
# Bridge 네트워크: 컨테이너 간 내부 통신 가능
# 같은 네트워크의 컨테이너끼리는 서비스명으로 통신 가능
# 예: postgres 컨테이너 → pr-bridge에서 'postgres:5432'로 접근
# =============================================================================
networks:
  pr-bridge-network:
    driver: bridge  # 기본 브릿지 네트워크